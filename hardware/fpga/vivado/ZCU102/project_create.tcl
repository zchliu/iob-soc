#*****************************************************************************************
# Vivado (TM) v2022.2 (64-bit)
#
# project_create.tcl: Tcl script for re-creating project 'New Project'
#
# Generated by Vivado on Tue Jun 13 01:35:44 PDT 2023
# IP Build 3669848 on Fri Oct 14 08:30:02 MDT 2022
#
# This file contains the Vivado Tcl commands for re-creating the project to the state*
# when this script was generated. In order to re-create the project, please source this
# file in the Vivado Tcl Shell.
#
# * Note that the runs in the created project will be configured the same way as the
#   original project, however they will not be launched automatically. To regenerate the
#   run results please launch the synthesis/implementation runs as needed.
#
#*****************************************************************************************
# NOTE: In order to use this script for source control purposes, please make sure that the
#       following files are added to the source control system:-
#
# 1. This project restoration tcl script (project_create.tcl) that was generated.
#
# 2. The following source(s) files that were local or imported into the original project.
#    (Please see the '$orig_proj_dir' and '$origin_dir' variable setting below at the start of the script)
#
#    "/home/zchliu/work/iob-soc/hardware/fpga/vivado/ZCU102/system.v"
#    "/home/zchliu/work/iob-soc/hardware/fpga/vivado/ZCU102/verilog/top_system.v"
#    "/home/zchliu/work/iob-soc/hardware/fpga/vivado/ZCU102/verilog/clock_wizard.v"
#    "/home/zchliu/work/iob-soc/hardware/fpga/vivado/ZCU102/top_system.xdc"
#
# 3. The following remote source files that were added to the original project:-
#
#    "/home/zchliu/work/iob-soc/submodules/LIB/hardware/iob_merge/iob_merge.v"
#    "/home/zchliu/work/iob-soc/submodules/LIB/hardware/iob_split/iob_split.v"
#    "/home/zchliu/work/iob-soc/submodules/LIB/hardware/iob_pulse_gen/iob_pulse_gen.v"
#    "/home/zchliu/work/iob-soc/submodules/LIB/hardware/iob_edge_detect/iob_edge_detect.v"
#    "/home/zchliu/work/iob-soc/submodules/LIB/hardware/iob_reg/iob_reg.v"
#    "/home/zchliu/work/iob-soc/submodules/MEM/hardware/rom/iob_rom_sp/iob_rom_sp.v"
#    "/home/zchliu/work/iob-soc/submodules/MEM/hardware/ram/iob_ram_dp/iob_ram_dp.v"
#    "/home/zchliu/work/iob-soc/submodules/MEM/hardware/ram/iob_ram_dp_be/iob_ram_dp_be.v"
#    "/home/zchliu/work/iob-soc/submodules/PICORV32/hardware/src/picorv32.v"
#    "/home/zchliu/work/iob-soc/submodules/PICORV32/hardware/src/iob_picorv32.v"
#    "/home/zchliu/work/iob-soc/submodules/UART/hardware/src/uart_core.v"
#    "/home/zchliu/work/iob-soc/submodules/UART/hardware/src/iob_uart.v"
#    "/home/zchliu/work/iob-soc/submodules/TIMER/hardware/src/iob_timer.v"
#    "/home/zchliu/work/iob-soc/submodules/TIMER/hardware/src/timer.v"
#    "/home/zchliu/work/iob-soc/hardware/src/boot_ctr.v"
#    "/home/zchliu/work/iob-soc/hardware/src/int_mem.v"
#    "/home/zchliu/work/iob-soc/hardware/src/sram.v"
#    "/home/zchliu/work/iob-soc/submodules/LIB/hardware/iob_reset_sync/iob_reset_sync.v"
#
#*****************************************************************************************

# Check file required for this script exists
proc checkRequiredFiles { origin_dir} {
  set status true
  set files [list \
 "[file normalize "$origin_dir/system.v"]"\
 "[file normalize "$origin_dir/verilog/top_system.v"]"\
 "[file normalize "$origin_dir/verilog/clock_wizard.v"]"\
 "[file normalize "$origin_dir/top_system.xdc"]"\
  ]
  foreach ifile $files {
    if { ![file isfile $ifile] } {
      puts " Could not find local file $ifile "
      set status false
    }
  }

  set files [list \
 "[file normalize "$origin_dir/../../../../submodules/LIB/hardware/iob_merge/iob_merge.v"]"\
 "[file normalize "$origin_dir/../../../../submodules/LIB/hardware/iob_split/iob_split.v"]"\
 "[file normalize "$origin_dir/../../../../submodules/LIB/hardware/iob_pulse_gen/iob_pulse_gen.v"]"\
 "[file normalize "$origin_dir/../../../../submodules/LIB/hardware/iob_edge_detect/iob_edge_detect.v"]"\
 "[file normalize "$origin_dir/../../../../submodules/LIB/hardware/iob_reg/iob_reg.v"]"\
 "[file normalize "$origin_dir/../../../../submodules/MEM/hardware/rom/iob_rom_sp/iob_rom_sp.v"]"\
 "[file normalize "$origin_dir/../../../../submodules/MEM/hardware/ram/iob_ram_dp/iob_ram_dp.v"]"\
 "[file normalize "$origin_dir/../../../../submodules/MEM/hardware/ram/iob_ram_dp_be/iob_ram_dp_be.v"]"\
 "[file normalize "$origin_dir/../../../../submodules/PICORV32/hardware/src/picorv32.v"]"\
 "[file normalize "$origin_dir/../../../../submodules/PICORV32/hardware/src/iob_picorv32.v"]"\
 "[file normalize "$origin_dir/../../../../submodules/UART/hardware/src/uart_core.v"]"\
 "[file normalize "$origin_dir/../../../../submodules/UART/hardware/src/iob_uart.v"]"\
 "[file normalize "$origin_dir/../../../../submodules/TIMER/hardware/src/iob_timer.v"]"\
 "[file normalize "$origin_dir/../../../../submodules/TIMER/hardware/src/timer.v"]"\
 "[file normalize "$origin_dir/../../../src/boot_ctr.v"]"\
 "[file normalize "$origin_dir/../../../src/int_mem.v"]"\
 "[file normalize "$origin_dir/../../../src/sram.v"]"\
 "[file normalize "$origin_dir/../../../../submodules/LIB/hardware/iob_reset_sync/iob_reset_sync.v"]"\
  ]
  foreach ifile $files {
    if { ![file isfile $ifile] } {
      puts " Could not find remote file $ifile "
      set status false
    }
  }

  return $status
}
# Set the reference directory for source file relative paths (by default the value is script directory path)
set origin_dir "."

# Use origin directory path location variable, if specified in the tcl shell
if { [info exists ::origin_dir_loc] } {
  set origin_dir $::origin_dir_loc
}

# Set the project name
set _xil_proj_name_ "New Project"

# Use project name variable, if specified in the tcl shell
if { [info exists ::user_project_name] } {
  set _xil_proj_name_ $::user_project_name
}

variable script_file
set script_file "project_create.tcl"

# Help information for this script
proc print_help {} {
  variable script_file
  puts "\nDescription:"
  puts "Recreate a Vivado project from this script. The created project will be"
  puts "functionally equivalent to the original project for which this script was"
  puts "generated. The script contains commands for creating a project, filesets,"
  puts "runs, adding/importing sources and setting properties on various objects.\n"
  puts "Syntax:"
  puts "$script_file"
  puts "$script_file -tclargs \[--origin_dir <path>\]"
  puts "$script_file -tclargs \[--project_name <name>\]"
  puts "$script_file -tclargs \[--help\]\n"
  puts "Usage:"
  puts "Name                   Description"
  puts "-------------------------------------------------------------------------"
  puts "\[--origin_dir <path>\]  Determine source file paths wrt this path. Default"
  puts "                       origin_dir path value is \".\", otherwise, the value"
  puts "                       that was set with the \"-paths_relative_to\" switch"
  puts "                       when this script was generated.\n"
  puts "\[--project_name <name>\] Create project with the specified name. Default"
  puts "                       name is the name of the project from where this"
  puts "                       script was generated.\n"
  puts "\[--help\]               Print help information for this script"
  puts "-------------------------------------------------------------------------\n"
  exit 0
}

if { $::argc > 0 } {
  for {set i 0} {$i < $::argc} {incr i} {
    set option [string trim [lindex $::argv $i]]
    switch -regexp -- $option {
      "--origin_dir"   { incr i; set origin_dir [lindex $::argv $i] }
      "--project_name" { incr i; set _xil_proj_name_ [lindex $::argv $i] }
      "--help"         { print_help }
      default {
        if { [regexp {^-} $option] } {
          puts "ERROR: Unknown option '$option' specified, please type '$script_file -tclargs --help' for usage info.\n"
          return 1
        }
      }
    }
  }
}

# Set the directory path for the original project from where this script was exported
set orig_proj_dir "[file normalize "$origin_dir/."]"

# Check for paths and files needed for project creation
set validate_required 0
if { $validate_required } {
  if { [checkRequiredFiles $origin_dir] } {
    puts "Tcl file $script_file is valid. All files required for project creation is accesable. "
  } else {
    puts "Tcl file $script_file is not valid. Not all files required for project creation is accesable. "
    return
  }
}

# Create project
create_project ${_xil_proj_name_} ./${_xil_proj_name_} -part xczu9eg-ffvb1156-2-e

# Set the directory path for the new project
set proj_dir [get_property directory [current_project]]

# Set project properties
set obj [current_project]
set_property -name "default_lib" -value "xil_defaultlib" -objects $obj
set_property -name "enable_resource_estimation" -value "0" -objects $obj
set_property -name "enable_vhdl_2008" -value "1" -objects $obj
set_property -name "ip_cache_permissions" -value "read write" -objects $obj
set_property -name "ip_output_repo" -value "$proj_dir/.cache/ip" -objects $obj
set_property -name "mem.enable_memory_map_generation" -value "1" -objects $obj
set_property -name "part" -value "xczu9eg-ffvb1156-2-e" -objects $obj
set_property -name "revised_directory_structure" -value "1" -objects $obj
set_property -name "sim.central_dir" -value "$proj_dir/p_user_files" -objects $obj
set_property -name "sim.ip.auto_export_scripts" -value "1" -objects $obj
set_property -name "simulator_language" -value "Mixed" -objects $obj
set_property -name "sim_compile_state" -value "1" -objects $obj
set_property -name "source_mgmt_mode" -value "None" -objects $obj

# Create 'sources_1' fileset (if not found)
if {[string equal [get_filesets -quiet sources_1] ""]} {
  create_fileset -srcset sources_1
}

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize "${origin_dir}/../../../../submodules/LIB/hardware/iob_merge/iob_merge.v"] \
 [file normalize "${origin_dir}/../../../../submodules/LIB/hardware/iob_split/iob_split.v"] \
 [file normalize "${origin_dir}/../../../../submodules/LIB/hardware/iob_pulse_gen/iob_pulse_gen.v"] \
 [file normalize "${origin_dir}/../../../../submodules/LIB/hardware/iob_edge_detect/iob_edge_detect.v"] \
 [file normalize "${origin_dir}/../../../../submodules/LIB/hardware/iob_reg/iob_reg.v"] \
 [file normalize "${origin_dir}/../../../../submodules/MEM/hardware/rom/iob_rom_sp/iob_rom_sp.v"] \
 [file normalize "${origin_dir}/../../../../submodules/MEM/hardware/ram/iob_ram_dp/iob_ram_dp.v"] \
 [file normalize "${origin_dir}/../../../../submodules/MEM/hardware/ram/iob_ram_dp_be/iob_ram_dp_be.v"] \
 [file normalize "${origin_dir}/../../../../submodules/PICORV32/hardware/src/picorv32.v"] \
 [file normalize "${origin_dir}/../../../../submodules/PICORV32/hardware/src/iob_picorv32.v"] \
 [file normalize "${origin_dir}/../../../../submodules/UART/hardware/src/uart_core.v"] \
 [file normalize "${origin_dir}/../../../../submodules/UART/hardware/src/iob_uart.v"] \
 [file normalize "${origin_dir}/../../../../submodules/TIMER/hardware/src/iob_timer.v"] \
 [file normalize "${origin_dir}/../../../../submodules/TIMER/hardware/src/timer.v"] \
 [file normalize "${origin_dir}/../../../src/boot_ctr.v"] \
 [file normalize "${origin_dir}/../../../src/int_mem.v"] \
 [file normalize "${origin_dir}/../../../src/sram.v"] \
 [file normalize "${origin_dir}/../../../../submodules/LIB/hardware/iob_reset_sync/iob_reset_sync.v"] \
]
add_files -norecurse -fileset $obj $files

# Import local files from the original project
set files [list \
 [file normalize "${origin_dir}/system.v" ]\
 [file normalize "${origin_dir}/verilog/top_system.v" ]\
 [file normalize "${origin_dir}/verilog/clock_wizard.v" ]\
]
set imported_files [import_files -fileset sources_1 $files]

# Set 'sources_1' fileset file properties for remote files
set file "$origin_dir/../../../../submodules/LIB/hardware/iob_merge/iob_merge.v"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/../../../../submodules/LIB/hardware/iob_split/iob_split.v"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/../../../../submodules/LIB/hardware/iob_pulse_gen/iob_pulse_gen.v"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/../../../../submodules/LIB/hardware/iob_edge_detect/iob_edge_detect.v"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/../../../../submodules/LIB/hardware/iob_reg/iob_reg.v"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/../../../../submodules/MEM/hardware/rom/iob_rom_sp/iob_rom_sp.v"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/../../../../submodules/MEM/hardware/ram/iob_ram_dp/iob_ram_dp.v"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/../../../../submodules/MEM/hardware/ram/iob_ram_dp_be/iob_ram_dp_be.v"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/../../../../submodules/PICORV32/hardware/src/picorv32.v"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/../../../../submodules/PICORV32/hardware/src/iob_picorv32.v"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/../../../../submodules/UART/hardware/src/uart_core.v"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/../../../../submodules/UART/hardware/src/iob_uart.v"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/../../../../submodules/TIMER/hardware/src/iob_timer.v"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/../../../../submodules/TIMER/hardware/src/timer.v"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/../../../src/boot_ctr.v"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/../../../src/int_mem.v"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/../../../src/sram.v"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/../../../../submodules/LIB/hardware/iob_reset_sync/iob_reset_sync.v"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj


# Set 'sources_1' fileset file properties for local files
set file "ZCU102/system.v"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "verilog/top_system.v"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj


# Set 'sources_1' fileset properties
set obj [get_filesets sources_1]
set_property -name "include_dirs" -value "[file normalize "$origin_dir/"] [file normalize "$origin_dir/../../../../submodules/UART/hardware/include"] [file normalize "$origin_dir/../../../../submodules/LIB/hardware/include"] [file normalize "$origin_dir/../../../../submodules/TIMER/hardware/include"] [file normalize "$origin_dir/../../../../submodules/LIB/hardware/include"] [file normalize "$origin_dir/"] [file normalize "$origin_dir/../../../include"] [file normalize "$origin_dir/../../../../submodules/LIB/hardware/include"]" -objects $obj
set_property -name "top" -value "top_system" -objects $obj
set_property -name "top_auto_set" -value "0" -objects $obj
set_property -name "verilog_define" -value "INIT_MEM DATA_W=32 ADDR_W=32 BOOTROM_ADDR_W=12 SRAM_ADDR_W=15 FIRM_ADDR_W=15 DCACHE_ADDR_W=24 N_SLAVES=2 E=31 P=30 B=29 UART=0 TIMER=1 N_SLAVES_W=1 USE_MUL_DIV=1 USE_COMPRESSED=1 DDR_DATA_W=128 DDR_ADDR_W=29" -objects $obj

# Create 'constrs_1' fileset (if not found)
if {[string equal [get_filesets -quiet constrs_1] ""]} {
  create_fileset -constrset constrs_1
}

# Set 'constrs_1' fileset object
set obj [get_filesets constrs_1]

# Add/Import constrs file and set constrs file properties
set file "[file normalize "$origin_dir/top_system.xdc"]"
set file_imported [import_files -fileset constrs_1 [list $file]]
set file "ZCU102/top_system.xdc"
set file_obj [get_files -of_objects [get_filesets constrs_1] [list "*$file"]]
set_property -name "file_type" -value "XDC" -objects $file_obj

# Set 'constrs_1' fileset properties
set obj [get_filesets constrs_1]
set_property -name "target_part" -value "xczu9eg-ffvb1156-2-e" -objects $obj

# Create 'sim_1' fileset (if not found)
if {[string equal [get_filesets -quiet sim_1] ""]} {
  create_fileset -simset sim_1
}

# Set 'sim_1' fileset object
set obj [get_filesets sim_1]
# Empty (no sources present)

# Set 'sim_1' fileset properties
set obj [get_filesets sim_1]

# Set 'utils_1' fileset object
set obj [get_filesets utils_1]
# Empty (no sources present)

# Set 'utils_1' fileset properties
set obj [get_filesets utils_1]

set idrFlowPropertiesConstraints ""
catch {
 set idrFlowPropertiesConstraints [get_param runs.disableIDRFlowPropertyConstraints]
 set_param runs.disableIDRFlowPropertyConstraints 1
}

# set the current synth run
current_run -synthesis [get_runs synth_1]

# set the current impl run
current_run -implementation [get_runs impl_1]
catch {
 if { $idrFlowPropertiesConstraints != {} } {
   set_param runs.disableIDRFlowPropertyConstraints $idrFlowPropertiesConstraints
 }
}

puts "INFO: Project created:${_xil_proj_name_}"
# Delete the gadget 'drc_1' 
if {[string equal [get_dashboard_gadgets [ list "drc_1" ] ] "drc_1"]} {
delete_dashboard_gadgets -gadgets drc_1
}
# Delete the gadget 'methodology_1' 
if {[string equal [get_dashboard_gadgets [ list "methodology_1" ] ] "methodology_1"]} {
delete_dashboard_gadgets -gadgets methodology_1
}
# Delete the gadget 'power_1' 
if {[string equal [get_dashboard_gadgets [ list "power_1" ] ] "power_1"]} {
delete_dashboard_gadgets -gadgets power_1
}
# Delete the gadget 'timing_1' 
if {[string equal [get_dashboard_gadgets [ list "timing_1" ] ] "timing_1"]} {
delete_dashboard_gadgets -gadgets timing_1
}
# Delete the gadget 'utilization_1' 
if {[string equal [get_dashboard_gadgets [ list "utilization_1" ] ] "utilization_1"]} {
delete_dashboard_gadgets -gadgets utilization_1
}
# Delete the gadget 'utilization_2' 
if {[string equal [get_dashboard_gadgets [ list "utilization_2" ] ] "utilization_2"]} {
delete_dashboard_gadgets -gadgets utilization_2
}
